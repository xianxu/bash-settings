umask 0007

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

HISTFILESIZE=100000
# avoid duplicates..
export HISTCONTROL=ignoredups:erasedups  
# append history entries..
shopt -s histappend
# After each command, save and reload history
# export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
export GEM_PATH=~/.gem
export GEM_HOME=~/.gem

export _UNAME=`uname`
# terminal settings
export TERM='xterm-256color'
export CLICOLOR=yes
#export DYLD_LIBRARY_PATH=/Applications/YourKit_Java_Profiler_9.5.5.app/bin/mac
export t_Co=256
export EDITOR=vim
export TMPDIR=$HOME/tmp/
export ANDROID_HOME=$HOME/android-sdk-macosx

# java settings
if [ "${_UNAME}" = "Linux" ]; then
  export JVMSTAT_JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
  export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
else
  export JVMSTAT_JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
fi
export SCALA_HOME=/usr/local/Cellar/scala/2.9.2

# golang settings
export GOPATH=$HOME/workspace/mygo
export GOROOT=$HOME/workspace/go
export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

export PLAN9=/Users/xx/workspace/plan9port
export PATH=$PATH:$PLAN9/bin

export PATH=~/.gem/bin:/usr/local/Cellar/objective-caml/4.01.0/bin:$HOME/.cabal/bin:/usr/local/opt/ruby193/bin:$HOME/bin:$HOME/src/bin:$HOME/android-sdk-macosx/tools:$HOME/android-sdk-macosx/platform-tools:/usr/local/bin:~/bin:/opt/local/bin:/usr/local/mysql/bin:$HOME/workspace/play-2.1.3:$HOME/workspace/src/storm-0.9.0-wip21/bin:$PATH

# dealing with git and hg, mostly set good PS1
source ~/.git-completion.bash

txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

hg_ps1() {
  hg prompt "{branch}" 2> /dev/null
}

git_or_hg() {
  ghg=$(__git_ps1)
  if [ "$(hg_ps1)" != "" ]
    then
      ghg="($(hg_ps1))"
  fi
  echo $ghg
}
export PS1="\[$txtblu\]\$PWD \[$bldred\]\$(git_or_hg)\[$txtrst\]\[$txtrst\][\A]\n[\u@\[$bldylw\]\h\[$txtrst\]] \$ "

# tunnel to a machine.
# usage:
#   tunnel host:port
#   tunnel host:port bridge
#   tunnel host:port lport
#   tunnel host:port lport bridge
tunnel() {
  host=${1%%:*}
  port=${1#*:}
  lport=$2
  via=$3
  if [ "x$host" = "x" ]; then
    echo "Create ssh tunnel to a machine."
    echo "Usage:"
    echo "  tunnel host:port"
    echo "  tunnel host:port bridge"
    echo "  tunnel host:port lport"
    echo "  tunnel host:port lport bridge"
    return
  # if lport is not set
  elif [ "x$lport" = "x" ]; then
    lport=$port
    via=$host
  elif ! [[ "$lport" =~ ^[0-9]+$ ]]; then
    via=$lport
    lport=$port
  elif [ "x$via" = "x" ]; then
    via=$host
  fi

  echo ssh -L $lport:$host:$port -f $via -N
  ssh -L $lport:$host:$port -f $via -N
}

gkill() {
  pattern=$1
  ps auxwww | grep $pattern | grep -v grep
  echo
  read -p "Do you want to kill all those processes? Ctrl-C to abort. " yn

  echo
  echo Killing:
  ps auxwww | grep $pattern | grep -v grep | sed "s/^[^ ]* *//" | cut -f1 -d" "
  ps auxwww | grep $pattern | grep -v grep | sed "s/^[^ ]* *//" | cut -f1 -d" " | xargs -n1 kill
}

function vv() {
  if [ "${_UNAME}" = "Linux" ]; then
    vim -R $@
  else
    /Applications/MacVim.app/Contents/MacOS/Vim -R $@
  fi
}

function v() {
  if [ "${_UNAME}" = "Linux" ]; then
    vim $@
  else
    /Applications/MacVim.app/Contents/MacOS/Vim $@
  fi
}

function e() {
  emacs $@
}

alias http='python -m SimpleHTTPServer'
alias l='ls -lrt'

export LANG=en_US.UTF-8
set meta-flag on
set input-meta on
set output-meta on
set convert-meta off
export LC_CTYPE=en_US.UTF-8

# make it safer
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias srm='srm -i'
alias dir='ls -al'
alias less='less -MX'

alias irb='irb --simple-prompt -r irb/completion'
alias mkpasswd='openssl rand 6 -base64'

alias pjson='python -mjson.tool'

# source search
f2() {
  e=${@//../[a-zA-Z0-9_]*}
  if [ "${_UNAME}" = "Linux" ]; then
    find -L . -regextype posix-extended -regex ".*$e.*\.(java|scala|rb|py|go|c|y|thrift)" > .foundfiles
    ack-grep --follow --nogroup --type-set yacc=.y,go=.go,thrift=.thrift --pager="less -R -X" -r "$e"
  else
    find -E -L . -regex ".*$e.*\.(java|scala|rb|py|go|c|y)" > .foundfiles
    ack --follow --nogroup --pager="less -R -X" --type-set yacc=.y,go=.g,thrift=.thrift -r "$e"
  fi

  rm -f .foundfiles
}

f2d() {
  f2 "(module|class|trait|object|def|val|var|type|def self\.)[ \t]+$1"
}

f1() {
  git grep --color=always -n -E "$*"
}

f1d() {
  git grep --color=always -n -E "(interface|public|private|protected|module|class|trait|object|def|val|var|type|let|def self\.)[ \t]+$*"
}

f() {
  if [ "$(__git_ps1)" != "" ]; then
    f1 $*
  else
    f2 $*
  fi
}

fn() {
  directory=$1
  shift
  find $directory -name \*
}

fd() {
  if [ "$(__git_ps1)" != "" ]; then
    f1d $*
  else
    f2d $*
  fi
}

g() {
  GREP_COLOR='1;32' grep --color=always "$*" | less -R
}

h() {
  GREP_COLOR='1;33' grep --color=always "$*" | less -R
}

i() {
  GREP_COLOR='1;34' grep --color=always "$*" | less -R
}

j() {
  GREP_COLOR='1;35' grep --color=always "$*" | less -R
}

g-() {
  GREP_COLOR='1;32' grep --color=always -v "$*" | less -R
}

# ramdisk
ramdisk_unmount() {
  diskutil eject "ramdisk"
}

ramdisk() {
  a=$1
  a=$((a * 1024 * 2))
  cmd="hdiutil attach -nomount ram://$a"
  diskutil eject "ramdisk"
  diskutil erasevolume HFS+ "ramdisk" `$cmd`
  open /Volumes/ramdisk
}

# history search
bind '"\e[5~": history-search-backward'
bind '"\e[6~": history-search-forward'
# make ctrl-s work for forward search
stty stop ^J

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias .......='cd ../../../../../..'

sum() {
  gawk '{ sum += $1 }; END { print sum }'
}

w() {
  e=${@//\"/\\\"}
  watch -n1 "$e"
}

c() {
  color=$1
  e=${2//--/[a-zA-Z0-9_]*}
  ack --flush --passthru --color --color-match=$color $e
}

# make ctrl-s work in incremental search.
stty -ixoff
stty stop undef
stty start undef

# bash readline vi mode
set -o vi

# create ctags file for scala
scalatags() {
  ctags -R --languages=scala --exclude=test *
}

if [ "${_UNAME}" = "Linux" ]; then
  # Check to see if SSH Agent is already running
  # Only need this on linux, mac seems to working fine.
  agent_pid="$(ps -ef | grep "ssh-agent" | grep -v "grep" | awk '{print($2)}')"

  # If the agent is not running (pid is zero length string)
  if [[ -z "$agent_pid" ]]; then
    # Start up SSH Agent

    # this seems to be the proper method as opposed to `exec ssh-agent bash`
    eval "$(ssh-agent)"

    # if you have a passphrase on your key file you may or may
    # not want to add it when logging in, so comment this out
    # if asking for the passphrase annoys you
    ssh-add

  # If the agent is running (pid is non zero)
  else
    # Connect to the currently running ssh-agent

    # this doesn't work because for some reason the ppid is 1 both when
    # starting from ~/.profile and when executing as `ssh-agent bash`
    agent_ppid="$(ps -ef | grep "ssh-agent" | grep -v "grep" | awk '{print($3)}')"
    #agent_ppid="$(($agent_pid - 1))"

    # and the actual auth socket file name is simply numerically one less than
    # the actual process id, regardless of what `ps -ef` reports as the ppid
    agent_sock="$(find /tmp -path "*ssh*" -type s -iname "agent.$agent_ppid" 2>/dev/null)"

    echo "Agent pid $agent_pid"
    export SSH_AGENT_PID="$agent_pid"

    echo "Agent sock $agent_sock"
    export SSH_AUTH_SOCK="$agent_sock"
  fi
fi

scalatags() {
  ctags -R --languages=scala --exclude=test *
}

jvmtags() {
  ctags -R --languages=Scala,MyJava --exclude=test *
}

gitrm() {
  git branch -D $1
  git push origin :$1
}

gn(){
  git notes show
}

ga() {
  git notes add -f -m "$*"
}

brn() {
  git branch | perl -pe s/^..//
}

br() {
  for k in `brn`; do echo -e `git show --pretty=format:"%Cgreen%ci %Cblue%cr%x09%x09%Creset" $k -- | head -n 1` | sed 's/ /:/g' | awk '{printf "%-56s\n", $1}' | sed 's/:/ /g' | sed "s#\$#$k#"; done | sort
}

st() {
  git status
}

Ocaml() {
  rlwrap ocaml
}

gitrm() {
  for b in $@
  do
    git branch -D $b
    git push origin :$b
  done
}

idea() {
  name=$1
  shift
  rest=$@
  echo creating project named $name for the $rest
  #find $rest -name BUILD | sed "s#BUILD#:#"
  builds=`find $rest -name BUILD | sed "s#BUILD#::#"`
  echo will include the following targets:
  echo $builds
  ./pants goal idea --idea-java-language-level=7 --idea-project-name=$name -- $builds
}

D() {
  git diff master $@
}

gs() {
  git status
}

gdm() {
  git diff --name-only master
}

export DOCKER_PORT=6666

ldocker() {
  docker -H=tcp://localhost:6666 $@
}

fr() {
  java -jar $FREGE_JAR $@
}

export FREGE_JAR=$HOME/workspace/jvms/frege3.21.313-ge2fdeea.jar

frm() {
  java -jar $FREGE_JAR $@
  java -cp .:$FREGE_JAR Main
}

oc() {
  ocamljava $@
}

irssi_awl() {
  perl $HOME/.irssi/scripts/autorun/adv_windowlist.pl
}

eval `opam config env`

ctrlp_clear() {
  find . -name .cp | xargs -n1 rm -fr
}

ctrlp_roastduck() {
  touch ~/workspace/science/src/scala/com/twitter/roastduck/.cp
  touch ~/workspace/science/tests/scala/com/twitter/roastduck/.cp
  touch ~/workspace/science/roastduck/.cp
}

# Testing out stuff with acme, seems extremely powerful:
alias acme='acme -f ~/workspace/plan9port/font/pelm/euro.9.font'
